	.ORIG x3000
	AND R5,R5,#0
	ADD R5,R5,#-3
	ST R5,NEG3
	ADD R5,R5,#-2
	ST R5,NEG5
	ADD R5,R5,#-3
	ST R5,NEG8
	AND R6,R6,#0	;R6 IS GONNA BE 1 OR -1 TO ALTURNATE BTWN THE PLAYERS
	ADD R6,R6,#1	
SETADRS	LEA R0,AM0	
	ADD R0,R0,#10
	ST R0,ADRA	;ADDRESS OF ROW A IS STORED AT ADRA
	LEA R0,BM0
	ADD R0,R0,#12
	ST R0,ADRB	;ADDRESS OF ROW B IS STORED AT ADRB
	LEA R0,CM0
	ADD R0,R0,#15
	ST R0,ADRC	;ADDRESS OF ROW C IS STORED AT ADRC

START	LEA R0,AM0
	LDR R0,R0,#7
	BRnp STARTT
	LEA R0,BM0
	LDR R0,R0,#7
	BRnp STARTT
	LEA R0,CM0
	LDR R0,R0,#7
	BRz END
	
STARTT	LEA R0,AM0	;STRING FOR ROW A IS SAVED INTO R0 TO BE PROMPTED
	PUTS
	LD R0,NEWLINE
	OUT
	LEA R0,BM0	;STRING FOR ROW B IS SAVED INTO R0 TO BE PROMPTED
	PUTS
	LD R0,NEWLINE
	OUT
	LEA R0,CM0	;STRING FOR ROW C IS SAVED INTO R0 TO BE PROMPTED
	PUTS
	LD R0,NEWLINE
	OUT
	
REPEAT	ADD R6,R6,#0	;CHECK TO SEE IF R6 IS 1 OR -1 TO DECIDE WHICH PLAYER'S TURN IT IS
	BRn PL2
PL1	LEA R0,PLR1
	PUTS
	BR INPUT	
PL2	LEA R0,PLR2
	PUTS
	
	


INPUT	AND R0,R0,#0
	GETC
	ST R0,INP1	;THE INPUT ROW IS STORED AT INP1
	OUT
	GETC
	ST R0,INP2	;THE INPUT # OF ROCKS IS STORED AT INP2
	OUT
	LD R0,NEWLINE
	OUT
	
	

;COMPARE ROW

	LD R2,INP1	;R2 COULD BE HX OF ANY ASCII CHAR
	LD R3,A		;R3=-LETTER A
	ADD R3,R3,R2
	BRz ITSA	;IF INP1=A, JUMP TO ITSA
	LD R3,B		;R3=-LETTER B
	ADD R3,R3,R2
	BR ITSB		;IF INP1=B, JUMP TO ITSB
	LD R3,C		;R3=-LETTER C
	ADD R3,R3,R2
	BRz ITSC	;IF INP1=C, JUMP TO ITSC
	BRnp INVLD	;IF INP1=ANYTHING OTHER THAN A,B,OR C, PROMPT INVALID



;COMPARE NUMBER

ITSA	LD R5,NEG3	;R5=-3
	LD R1,ADRA	;R1=ADDRESS OF THE LAST ROCK IN ROW A
	JSR SBRTN1
	ST R1,ADRA
	ST R5,NEG3	;NUMBER OF ROCKS LEFT IN ROW A IS ADJUSTED
	NOT R6,R6	;NEXT PLAYER'S TURN
	BR START
	
	
	
ITSB	LD R5,NEG5	;R5=-5
	LD R1,ADRB	;R1=ADDRESS OF THE LAST ROCK IN ROW B
	JSR SBRTN1
	ST R1,ADRB
	ST R5,NEG5	;NUMBER OF ROCKS LEFT IN ROW B IS ADJUSTED
	NOT R6,R6	;NEXT PLAYER'S TURN
	BR START
	
ITSC	LD R5,NEG8	;R5=-8
	LD R1,ADRC	;R1=ADDRESS OF THE LAST ROCK IN ROW C
	JSR SBRTN1
	ST R1,ADRC
	ST R5,NEG8	;NUMBER OF ROCKS LEFT IN ROW C IS ADJUSTED
	NOT R6,R6	;NEXT PLAYER'S TURN
	BR START

SBRTN1	LD R2,INP2	;R2 COULD BE ANY ASCII CHAR
	ADD R2,R2,#-15
	ADD R2,R2,#-15	
	ADD R2,R2,#-15
	ADD R2,R2,#-3	;R2 COULD BE A NUMBER FROM 0-9
	BRnz INVLD
	ADD R5,R2,R5	;R5=NEGATIVE OF THE NUMBER OF ROCKS LEFT IN THE CHOSEN ROW
	BRp INVLD
	NOT R2,R2	
	ADD R2,R2,#1	;R2=NEGATIVE OF THE NUMBER INPUTED BY THE USER
	ADD R1,R1,R2	;R1=THE ADDRESS WHERE THE ROCK MUST BE REPLACED WITH \n
	AND R4,R4,#0	;R4=0
	STR R4,R1,#0	;STOR \n INTO R1
	RET


INVLD	LEA R0,INVALID
	PUTS
	LD R0,NEWLINE
	OUT
	BR REPEAT
	
	
END	HALT
NEG3	.FILL x0000
NEG5	.FILL x0000
NEG8	.FILL x0000
NEWLINE .FILL x000A
INP1	.FILL x0000
INP2	.FILL x0000
ADRA	.FILL x0000
ADRB	.FILL x0000
ADRC	.FILL x0000
A	.FILL xFFBF
B	.FILL xFFBE
C	.FILL xFFBD
INVALID	.STRINGZ "Invalid move. Try again."
PLR1	.STRINGZ "Player 1, choose a row and number of rocks:"
PLR2	.STRINGZ "Player 2, choose a row and number of rocks:"
AM0	.STRINGZ "ROW A: ooo"
BM0	.STRINGZ "ROW B: ooooo"
CM0	.STRINGZ "ROW C: oooooooo"
	.END